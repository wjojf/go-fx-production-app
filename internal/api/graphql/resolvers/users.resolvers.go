package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"

	"github.com/wjojf/go-uber-fx/internal/api/graphql/types"
	"github.com/wjojf/go-uber-fx/internal/domain/users/models"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input types.UserCreateInput) (*types.User, error) {
	panic(fmt.Errorf("not implemented: CreateUser - createUser"))
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, input types.UserUpdateInput) (*types.User, error) {
	panic(fmt.Errorf("not implemented: UpdateUser - updateUser"))
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (*types.User, error) {
	panic(fmt.Errorf("not implemented: DeleteUser - deleteUser"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*types.User, error) {

	var usersResponse []*types.User
	var users []models.User

	// Get users from the repository
	users, err := r.r.GetAllUsers(ctx)
	if err != nil {
		return nil, err
	}

	// Convert users to response
	for _, user := range users {
		usersResponse = append(usersResponse, types.NewUser(user))
	}

	return usersResponse, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*types.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
